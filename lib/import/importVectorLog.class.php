<?php
class ImportVectorLog {
	private $_mission;
	private $_dcmMissionPart;
	private $_pcmMissionPart;
	private $_pushbackMissionPart;
	private $_culDeSecSeconds;
	private $_startSingleCulDeSecTime;
	private $_phaseImport;
	private $_trails = array ();
	private $_islocValid = false;
	private $_lastLatitude;
	private $_lastLongitude;
	private $_currentRowDateTime;
	function __construct($year, $month, $day, $uploaded = false) {
		/*
		 * Day, month and year have to be given as string, because they are directly used as parts of the path to the csv-file.
		 */
		$this->year = ( string ) $year;
		$this->month = ( string ) $month;
		$this->day = ( string ) $day;
		$this->calendar_date = strtotime ( $year . '-' . $month . '-' . $day );
		$this->uploaded = $uploaded;
		
		// logfile of the import!!!
		$this->logfile = sfConfig::get ( 'app_import_taxibot_logfile' );
	}
	
	/**
	 * gets the fields of a csv line when there are no whitespaces between commas (e.g.
	 * ,,,,)
	 *
	 * @param string $line        	
	 */
	private function getCsvWoWhiteSpace($line) {
		$arr = str_split ( $line );
		$retArray = array ();
		$index = 0;
		$duringField = false;
		
		for($i = 0; $i < count ( $arr ); $i ++) {
			if ($arr [$i] == " " && $i > count ( $arr ) - 2) {
				break;
			}
			
			if ($arr [$i] == ',') {
				if ($duringField) {
					// field is over
					$duringField = false;
					++ $index;
				}
				
				if ($i + 1 == count ( $arr ) || $arr [$i + 1] == ',' || $arr [$i] == " ") {
					$retArray [] = ' ';
					++ $index;
				}
			} else {
				if (! $duringField) {
					// field start;
					$duringField = true;
					$retArray [] = $arr [$i];
				} else {
					$retArray [$index] .= $arr [$i];
				}
			}
		}
		
		unset ( $arr );
		return $retArray;
	}
	
	/**
	 * This function imports one data file generated by a "VECTOR" logger of certain day to the database.
	 * If data cotained in file already present in the database, existing data is deleted first; then, all data is
	 * imported again.
	 *
	 * @author Moshe
	 */
	public function import($fileName, $blfName) {
		$this->_blfName = $blfName;
		$this->fileName = $fileName;
		$missionId = - 1;
		$this->loadingStep = 0;
		
		ini_set ( "memory_limit", "1024M" );
		
		set_time_limit ( 1000 );
		
		if (! $this->uploaded) {
			$file = sfConfig::get ( 'app_import_data_stack_log' );
			$csv_file = sfConfig::get ( 'app_import_path_stack_log' ) . DIRECTORY_SEPARATOR . $this->year . DIRECTORY_SEPARATOR . $this->month . DIRECTORY_SEPARATOR . $this->day . DIRECTORY_SEPARATOR . $file;
		} else {
			$csv_file = sfConfig::get ( 'sf_upload_dir' ) . '/' . $fileName;
		}
		
		if (file_exists ( $csv_file )) {
			$handle = fopen ( $csv_file, "r" );
		} else {
			/*
			 * Print error to STDERR and exit the whole script.
			 */
			fwrite ( STDERR, "[" . date ( 'Y-m-d H:i:s' ) . "] [stack] Csv-file from " . date ( 'Y-m-d', $this->calendar_date ) . " not found.\n" );
			
			return $missionId;
		}
		
		// start working on the file
		if ($handle) {
			
			/*
			 * Read csv-file and put contents to the associative array $import_data
			 */
			$import_data = array ();
			$row = 0;
			
			// get field names - column headers
			$fieldnames = fgetcsv ( $handle, 4096, "," );
			// $this->printArray($fieldnames);
			
			$dateTimeRow = null;
			
			while ( ($line = fgets ( $handle )) !== FALSE ) {
				$rowData = $this->getCsvWoWhiteSpace ( $line );
				
				$row ++;
				$number_of_columns = count ( $rowData );
				
				for($i = 0; $i < $number_of_columns; $i ++) {
					$trimmed = trim ( $rowData [$i] );
					$import_data [$fieldnames [$i]] = $trimmed;
				}
				
				// $this->printArray($import_data);die();
				$this->padData ( $import_data );
				$this->_currentRowDateTime = $import_data [LoggerFields::Data_Time_UTC];
				$this->analyzeRecord ( $import_data );
			}
			
			fclose ( $handle );
			$this->missionEnded ();
			// echo "mission endede";//debug
			$number_of_entries = $row;
		}
		// echo "import done"; die();
		return $this->_mission;
	}
	
	/**
	 *
	 * @author Moshe Beutel
	 * @param array $record        	
	 */
	private function padData($record) {
		foreach ( $record as $datum ) {
			if (! $datum) {
				$datum = '';
			}
		}
	}
	
	/**
	 *
	 * @author Moshe Beutel
	 * @param array $record        	
	 *
	 */
	private function saveTrailPosition($record) {
		$latCand = $record [LoggerFields::Latitude_deg]; // 43
		$lonCand = $record [LoggerFields::Longitude_deg]; // 44
		$validityCand = $record [LoggerFields::Loc_Pos_Validity]; // 60
		
		$isUpdated = false;
		
		if ($validityCand != '') {
			$this->_islocValid = ( bool ) $validityCand;
		}
		
		if ($latCand != '') {
			$latCand = ( double ) $latCand;
			
			if ($latCand != $this->_lastLatitude) {
				$isUpdated = true;
			}
			$this->_lastLatitude = $latCand;
		}
		
		if ($lonCand != '') {
			$lonCand = ( double ) $lonCand;
			
			if ($lonCand != $this->_lastLongitude) {
				$isUpdated = true;
			}
			$this->_lastLongitude = $lonCand;
		}
		
		if (!$this->_islocValid) {
			return;
		}
		
		if ($isUpdated) {
			$trailPos = new TaxibotTrail ();
			
			// echo "latitude = $this->latitude, longitude = $this->longitude <br/>";
			$trailPos->setLongitude ( $this->_lastLongitude );
			$trailPos->setLatitude ( $this->_lastLatitude );
			$time = $this->GetDateTimeFromCsvFormat ( $this->_currentRowDateTime );
			
			$trailPos->setTime ( $time );
			$this->_trails [] = $trailPos;
		}
	}
	private function missionStarted() {

		ini_set('memory_limit', '512M');

		$this->__missionStarted = date ( 'Y-m-d H:i:s' );
		$this->tractor = TaxibotTractorPeer::getTractor ( substr ( $this->fileName, 0, strpos ( $this->fileName, '_' ) ) );
		$this->_mission->setTaxibotTractor ( $this->tractor );
	}
	private function missionEnded() {
		// die();
		if (! isset ( $this->_mission ))
			return;
		
		if ($this->_culDeSecSeconds != null) {
			$this->_mission->setCulDeSacTime ( gmdate ( "H:i:s", $this->_culDeSecSeconds ) );
		}
		
		$this->finishImportPhase ();
		
		$d1 = date ( 'Y-m-d H:i:s' );
		
		$endDateTime = $this->GetDateTimeFromCsvFormat ( $this->_currentRowDateTime );
		$this->_mission->setEndTime ( $endDateTime );
		$this->_mission->save ();
		
		$this->limitExceedImport->SaveAllItems ( $this->_mission->getId () );
		
		//dd($this->_trails);
		if (count ( $this->_trails ) > 0) {
			TaxibotTrailPeer::insertMultipleTrails ( $this->_trails, $this->_mission->getId () );
		}
		
		$this->fatigueHistoryImport->SaveAllItems ( $this->_mission->getId () );
		
		/*
		 * $d2 = date('Y-m-d H:i:s'); require_once sfConfig::get ( 'app_lib_helper' ) . "/TimeHelper.php"; var_dump($this->__missionStarted); echo "<br>"; var_dump($d1); echo "<br>"; var_dump($d2); echo "<br>"; echo (dateDiff($d2, $d1)); echo "<br>"; echo (dateDiff($d2, $this->__missionStarted)); die();
		 */
		
		$this->fatigueHistoryImport = null;
		
		ini_set('memory_limit', '128M');
	}
	private function finishImportPhase() {
		
		//dd($this->_phaseImport->_currentPartsMission);
		foreach ( $this->_phaseImport->_currentPartsMission as $partMission ) {
			if ($partMission == null || $partMission->getType () == PART_MISSION::UNLOADING) {
				continue;
			}
			
			$part = $this->_phaseImport->getPartMissionInEndFile ( $partMission->getType (), $partMission->getStart () );
			$this->_mission->addTaxibotPartsMission ( $part );
		} 
		
		foreach ( $this->_phaseImport->items as $partMission ) {
			$this->_mission->addTaxibotPartsMission ( $partMission );
		}
		
		$leftFuel = $this->_phaseImport->lastFuelEngineLeft - $this->_phaseImport->firstFuelEngineLeft;
		$rightFuel = $this->_phaseImport->lastFuelEngineRight - $this->_phaseImport->firstFuelEngineRight;
		
		$this->_mission->setLeftEngineFuel ( $leftFuel );
		$this->_mission->setRightEngineFuel ( $rightFuel );
	}
	
	/**
	 *
	 * @param array $record
	 *        	- logger record
	 *        	Check Mission data - id, tail number, flight number, AC weight, cg, Mission type.
	 *        	Those fields does not change durig mission.
	 */
	private function examineMissionData($record) {
		// mission id
		$missionIdCand = ( int ) $record [LoggerFields::Mission_ID]; // 71
		if (! isset ( $this->missionId ) && $missionIdCand != 0) {
			$this->missionId = $missionIdCand;
			$this->_mission->setMissionId ( $this->missionId );
		}
		
		// aircraft type
		if (! isset ( $this->aircraftType ) && array_key_exists ( LoggerFields::Aircraft_Type_Validity, $record ) && ( boolean ) $record [LoggerFields::Aircraft_Type_Validity]) { // 79
			
			$this->aircraftType = AircraftTypePeer::getAircraftTypeByHlcId ( $record [LoggerFields::Aircraft_type] ); // 80
			
			if ($this->aircraftType == null) {
				$this->aircraftType = AircraftTypePeer::getAircraftTypeByHlcId ( '10' );
			}
			
			$this->limitExceedImport = new LimitExceedImport ( $this->aircraftType );
		}
		
		// tail number
		// echo "$record [LoggerFields::Aircraft_TailNo]". $record [LoggerFields::Aircraft_TailNo] .":"; //DEBUG
		if (isset ( $this->aircraftType ) && ! isset ( $this->aircraft ) && array_key_exists ( LoggerFields::Aircraft_TailNo, $record ) && ($tailNumber = $this->_mission->GetTextAircraftTailNumberByHex ( $record [LoggerFields::Aircraft_TailNo] )) != '') {
			
			$this->aircraft = AircraftPeer::getAircraft ( $tailNumber, $this->aircraftType );
			$this->fatigueHistoryImport = new FatigueHistoryImport ( $this->aircraft );
			$this->_mission->setAircraft ( $this->aircraft );
		}
		
		// flight number
		if (! isset ( $this->flight ) && array_key_exists ( LoggerFields::Flight_Number_char1, $record ) && $record [LoggerFields::Flight_Number_char1] != '' && $record [LoggerFields::Flight_Number_char1] != '0') {
			$this->flight = $this->_mission->GetTextFlightNumber ( $record [LoggerFields::Flight_Number_char1], $record [LoggerFields::Flight_Number_char2], $record [LoggerFields::Flight_Number_char3], $record [LoggerFields::Flight_Number_char4], $record [LoggerFields::Flight_Number_char5], $record [LoggerFields::Flight_Number_char6], $record [LoggerFields::Flight_Number_char7], $record [LoggerFields::Flight_Number_char8] );
			$this->_mission->setFlightNumber ( $this->flight );
		}
		
		// AC weight
		if (! isset ( $this->aircraftWeight ) && array_key_exists ( LoggerFields::Aircraft_Weight_Validity, $record ) && ( boolean ) $record [LoggerFields::Aircraft_Weight_Validity] /*77*/) {
			$this->aircraftWeight = ( double ) $record [LoggerFields::Aircraft_weight]/*78*/;
			$this->_mission->setAircraftWeight ( $this->aircraftWeight );
		}
		
		// cg
		if (! isset ( $this->cg ) && array_key_exists ( LoggerFields::Aircraft_CG_Validity, $record ) && ( boolean ) $record [LoggerFields::Aircraft_CG_Validity]/*75*/) {
			$this->cg = ( double ) $record [LoggerFields::Aircraft_CenterGravity_pct]/*76*/;
			$this->_mission->setAircraftCg ( $this->cg );
		}
		
		// mission type
		if (! isset ( $this->missionType ) && array_key_exists ( LoggerFields::Mission_Type, $record ) && ($mt = $record [LoggerFields::Mission_Type]/*74*/) != '') {
			$this->_mission->setMissionType ( $mt );
			$this->missionType = $mt;
		}
	}
	private function analyzeRecord($record) {
		
		// Initialize record counter and phase
		if (! isset ( $this->recordNum )) {
			$this->recordNum = 0;
			$this->_phaseImport = new PhaseImport ();
		}
		
		// count records
		++ $this->recordNum;
		
		// echo " recordNum = $this->recordNum <br/>"; //debug
		
		if (! isset ( $this->_mission )) {
			// start a new mission
			$this->_mission = new TaxibotMission ();
			$startDateTime = $this->GetDateTimeFromCsvFormat ( $this->_currentRowDateTime );
			$this->_mission->setStartTime ( $startDateTime );
			$this->_mission->setBlfName($this->_blfName);
			$this->missionStarted ();
		}
		
		// mission non changing data : flight number, tail number, AC weight etc.
		$this->examineMissionData ( $record );
		
		// phase
		$this->_phaseImport->readRow ( $record, $this->_currentRowDateTime );
		
		// position
		$this->saveTrailPosition ( $record );
		
		// forces on Landing Gear
		if (isset ( $this->limitExceedImport )) {
			$this->limitExceedImport->readRowData ( $record, $this->_currentRowDateTime, $this->_lastLatitude, $this->_lastLongitude );
		}
		
		/* if($this->_phaseImport->veolcity != null){
			dd($this->_currentRowDateTime);
		} */
		
		if (isset ( $this->fatigueHistoryImport )) {
			$this->fatigueHistoryImport->readRowData ( $record, $this->_phaseImport->veolcity );
		}
	}
	private function sumCulDeSecTime($record) {
		$isSegmentValid = $record [LoggerFields::Segment_ID_Validity];
		$degmentId = $record [LoggerFields::Segment_ID];
		
		if ($isSegmentValid == "")
			return;
		
		$isSegmentValid = ( bool ) $isSegmentValid;
		
		if ($isSegmentValid && $this->checkIfCulDeSecOccurred ( $degmentId ) && $this->_startSingleCulDeSecTime == null) {
			
			// start single cul de sec time
			$this->_startSingleCulDeSecTime = $this->GetDateTimeFromCsvFormat ( $this->_currentRowDateTime );
		} else if ($this->_startSingleCulDeSecTime != null) {
			$endSingleCulDeSecTime = $this->GetDateTimeFromCsvFormat ( $this->_currentRowDateTime );
			$totalCurruntSingleCulDeSecTime = $endSingleCulDeSecTime->diff ( $this->_startSingleCulDeSecTime ); // DataInterval
			$curruntSingleCulDeSecSeconds = DateIntervalToSec ( $totalCurruntSingleCulDeSecTime ); // Integer
			$this->_culDeSecSeconds += $curruntSingleCulDeSecSeconds;
		}
	}
	private function checkIfCulDeSecOccurred($value) {
		if ($value == 825) {
			return false;
		}
		
		if (($value >= 822 && $value <= 898) || ($value >= 900 && $value <= 999) || ($value >= 1000 && $value <= 1083) || ($value >= 1116 && $value <= 1160)) {
			return true;
		}
		return false;
	}
	private function printObject($obj) {
		print "</br></br>";
		print "<pre>";
		print_r ( $obj );
		print "</pre>";
		print "</br></br>";
	}
	private function GetDateTimeFromCsvFormat($value) {
		$datetime = new DateTime ( $value . "+00" );
		$datetime->setTimeZone ( new DateTimeZone ( 'Europe/Berlin' ) );
		return $datetime;
	}
}
?>
