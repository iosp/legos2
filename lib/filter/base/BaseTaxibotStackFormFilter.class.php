<?php

/**
 * TaxibotStack filter form base class.
 *
 * @package    legos2
 * @subpackage filter
 * @author     Your name here
 */
abstract class BaseTaxibotStackFormFilter extends BaseFormFilterPropel
{
  public function setup()
  {
    $this->setWidgets(array(
      'utc_time'                                  => new sfWidgetFormFilterDate(array('from_date' => new sfWidgetFormDate(), 'to_date' => new sfWidgetFormDate(), 'with_empty' => false)),
      'mili_sec'                                  => new sfWidgetFormFilterInput(array('with_empty' => false)),
      'utc_validity'                              => new sfWidgetFormChoice(array('choices' => array('' => 'yes or no', 1 => 'yes', 0 => 'no'))),
      'latitude'                                  => new sfWidgetFormFilterInput(array('with_empty' => false)),
      'longitude'                                 => new sfWidgetFormFilterInput(array('with_empty' => false)),
      'position_validity'                         => new sfWidgetFormChoice(array('choices' => array('' => 'yes or no', 1 => 'yes', 0 => 'no'))),
      'velocity_north'                            => new sfWidgetFormFilterInput(array('with_empty' => false)),
      'velocity_east'                             => new sfWidgetFormFilterInput(array('with_empty' => false)),
      'velocity_validity'                         => new sfWidgetFormChoice(array('choices' => array('' => 'yes or no', 1 => 'yes', 0 => 'no'))),
      'acceleration_north'                        => new sfWidgetFormFilterInput(array('with_empty' => false)),
      'acceleration_east'                         => new sfWidgetFormFilterInput(array('with_empty' => false)),
      'acceleration_z'                            => new sfWidgetFormFilterInput(array('with_empty' => false)),
      'azimuth'                                   => new sfWidgetFormFilterInput(array('with_empty' => false)),
      'azimuth_validity'                          => new sfWidgetFormChoice(array('choices' => array('' => 'yes or no', 1 => 'yes', 0 => 'no'))),
      'mfl'                                       => new sfWidgetFormFilterInput(array('with_empty' => false)),
      'vertical_link_front_right'                 => new sfWidgetFormFilterInput(array('with_empty' => false)),
      'vertical_link_rear_left'                   => new sfWidgetFormFilterInput(array('with_empty' => false)),
      'vertical_link_rear_right'                  => new sfWidgetFormFilterInput(array('with_empty' => false)),
      'vertical_link_front_left'                  => new sfWidgetFormFilterInput(array('with_empty' => false)),
      'lateral_link_front_right'                  => new sfWidgetFormFilterInput(array('with_empty' => false)),
      'lateral_link_rear_left'                    => new sfWidgetFormFilterInput(array('with_empty' => false)),
      'lateral_link_rear_right'                   => new sfWidgetFormFilterInput(array('with_empty' => false)),
      'lateral_link_front_left'                   => new sfWidgetFormFilterInput(array('with_empty' => false)),
      'damper_load1'                              => new sfWidgetFormFilterInput(array('with_empty' => false)),
      'damper_load2'                              => new sfWidgetFormFilterInput(array('with_empty' => false)),
      'damper_displacement'                       => new sfWidgetFormFilterInput(array('with_empty' => false)),
      'damper_velocity'                           => new sfWidgetFormFilterInput(array('with_empty' => false)),
      'vertical_link_front_right_validity'        => new sfWidgetFormChoice(array('choices' => array('' => 'yes or no', 1 => 'yes', 0 => 'no'))),
      'vertical_link_rear_left_validity'          => new sfWidgetFormChoice(array('choices' => array('' => 'yes or no', 1 => 'yes', 0 => 'no'))),
      'vertical_link_rear_right_validity'         => new sfWidgetFormChoice(array('choices' => array('' => 'yes or no', 1 => 'yes', 0 => 'no'))),
      'vertical_link_front_left_validity'         => new sfWidgetFormChoice(array('choices' => array('' => 'yes or no', 1 => 'yes', 0 => 'no'))),
      'lateral_link_front_right_validity'         => new sfWidgetFormChoice(array('choices' => array('' => 'yes or no', 1 => 'yes', 0 => 'no'))),
      'lateral_link_rear_left_validity'           => new sfWidgetFormChoice(array('choices' => array('' => 'yes or no', 1 => 'yes', 0 => 'no'))),
      'lateral_link_rear_right_validity'          => new sfWidgetFormChoice(array('choices' => array('' => 'yes or no', 1 => 'yes', 0 => 'no'))),
      'lateral_link_front_left_validity'          => new sfWidgetFormChoice(array('choices' => array('' => 'yes or no', 1 => 'yes', 0 => 'no'))),
      'damper_load1_validity'                     => new sfWidgetFormFilterInput(array('with_empty' => false)),
      'damper_load2_validity'                     => new sfWidgetFormFilterInput(array('with_empty' => false)),
      'damper_status'                             => new sfWidgetFormFilterInput(array('with_empty' => false)),
      'gate1_position'                            => new sfWidgetFormFilterInput(array('with_empty' => false)),
      'gate2_position'                            => new sfWidgetFormFilterInput(array('with_empty' => false)),
      'clamping_gate_position'                    => new sfWidgetFormFilterInput(array('with_empty' => false)),
      'clamping_gate_pressure'                    => new sfWidgetFormFilterInput(array('with_empty' => false)),
      'aircraft_type'                             => new sfWidgetFormPropelChoice(array('model' => 'AircraftType', 'add_empty' => true, 'key_method' => 'getName')),
      'mission_id'                                => new sfWidgetFormPropelChoice(array('model' => 'TaxibotMission', 'add_empty' => true, 'key_method' => 'getMissionId')),
      'aircraft_tail_number'                      => new sfWidgetFormPropelChoice(array('model' => 'Aircraft', 'add_empty' => true, 'key_method' => 'getTailNumber')),
      'wheel_angle_feedback_front_right'          => new sfWidgetFormFilterInput(array('with_empty' => false)),
      'wheel_angle_feedback_front_left'           => new sfWidgetFormFilterInput(array('with_empty' => false)),
      'wheel_angle_feedback_rear_right'           => new sfWidgetFormFilterInput(array('with_empty' => false)),
      'wheel_angle_feedback_rear_left'            => new sfWidgetFormFilterInput(array('with_empty' => false)),
      'wheel_angle_feedback_front_right_validity' => new sfWidgetFormChoice(array('choices' => array('' => 'yes or no', 1 => 'yes', 0 => 'no'))),
      'wheel_angle_feedback_front_left_validity'  => new sfWidgetFormChoice(array('choices' => array('' => 'yes or no', 1 => 'yes', 0 => 'no'))),
      'wheel_angle_feedback_rear_right_validity'  => new sfWidgetFormChoice(array('choices' => array('' => 'yes or no', 1 => 'yes', 0 => 'no'))),
      'wheel_angle_feedback_rear_left_validity'   => new sfWidgetFormChoice(array('choices' => array('' => 'yes or no', 1 => 'yes', 0 => 'no'))),
      'pilot_command_angle'                       => new sfWidgetFormFilterInput(array('with_empty' => false)),
      'pilot_command_angle_validity'              => new sfWidgetFormChoice(array('choices' => array('' => 'yes or no', 1 => 'yes', 0 => 'no'))),
      'driving_mode'                              => new sfWidgetFormChoice(array('choices' => array('' => 'yes or no', 1 => 'yes', 0 => 'no'))),
      'actual_wheel_speed'                        => new sfWidgetFormFilterInput(array('with_empty' => false)),
      'desired_speed'                             => new sfWidgetFormFilterInput(array('with_empty' => false)),
      'actual_wheel_speed_validity'               => new sfWidgetFormChoice(array('choices' => array('' => 'yes or no', 1 => 'yes', 0 => 'no'))),
      'nlg_steering_angle'                        => new sfWidgetFormFilterInput(array('with_empty' => false)),
      'nlg_steering_angle_validity'               => new sfWidgetFormChoice(array('choices' => array('' => 'yes or no', 1 => 'yes', 0 => 'no'))),
      'turret_angle'                              => new sfWidgetFormFilterInput(array('with_empty' => false)),
      'turret_angle_validity'                     => new sfWidgetFormChoice(array('choices' => array('' => 'yes or no', 1 => 'yes', 0 => 'no'))),
      'nlg_logitudal_force'                       => new sfWidgetFormFilterInput(array('with_empty' => false)),
      'nlg_logitudal_force_validity'              => new sfWidgetFormFilterInput(array('with_empty' => false)),
      'traction_demand'                           => new sfWidgetFormFilterInput(array('with_empty' => false)),
      'pilot_break_detection_unfiltered'          => new sfWidgetFormChoice(array('choices' => array('' => 'yes or no', 1 => 'yes', 0 => 'no'))),
      'pilot_break_detection_filtered'            => new sfWidgetFormChoice(array('choices' => array('' => 'yes or no', 1 => 'yes', 0 => 'no'))),
      'pilot_break_estimation'                    => new sfWidgetFormFilterInput(array('with_empty' => false)),
      'is_exceeding'                              => new sfWidgetFormChoice(array('choices' => array('' => 'yes or no', 1 => 'yes', 0 => 'no'))),
    ));

    $this->setValidators(array(
      'utc_time'                                  => new sfValidatorDateRange(array('required' => false, 'from_date' => new sfValidatorDate(array('required' => false)), 'to_date' => new sfValidatorDate(array('required' => false)))),
      'mili_sec'                                  => new sfValidatorSchemaFilter('text', new sfValidatorInteger(array('required' => false))),
      'utc_validity'                              => new sfValidatorChoice(array('required' => false, 'choices' => array('', 1, 0))),
      'latitude'                                  => new sfValidatorSchemaFilter('text', new sfValidatorNumber(array('required' => false))),
      'longitude'                                 => new sfValidatorSchemaFilter('text', new sfValidatorNumber(array('required' => false))),
      'position_validity'                         => new sfValidatorChoice(array('required' => false, 'choices' => array('', 1, 0))),
      'velocity_north'                            => new sfValidatorSchemaFilter('text', new sfValidatorNumber(array('required' => false))),
      'velocity_east'                             => new sfValidatorSchemaFilter('text', new sfValidatorNumber(array('required' => false))),
      'velocity_validity'                         => new sfValidatorChoice(array('required' => false, 'choices' => array('', 1, 0))),
      'acceleration_north'                        => new sfValidatorSchemaFilter('text', new sfValidatorNumber(array('required' => false))),
      'acceleration_east'                         => new sfValidatorSchemaFilter('text', new sfValidatorNumber(array('required' => false))),
      'acceleration_z'                            => new sfValidatorSchemaFilter('text', new sfValidatorNumber(array('required' => false))),
      'azimuth'                                   => new sfValidatorSchemaFilter('text', new sfValidatorNumber(array('required' => false))),
      'azimuth_validity'                          => new sfValidatorChoice(array('required' => false, 'choices' => array('', 1, 0))),
      'mfl'                                       => new sfValidatorPass(array('required' => false)),
      'vertical_link_front_right'                 => new sfValidatorSchemaFilter('text', new sfValidatorNumber(array('required' => false))),
      'vertical_link_rear_left'                   => new sfValidatorSchemaFilter('text', new sfValidatorNumber(array('required' => false))),
      'vertical_link_rear_right'                  => new sfValidatorSchemaFilter('text', new sfValidatorNumber(array('required' => false))),
      'vertical_link_front_left'                  => new sfValidatorSchemaFilter('text', new sfValidatorNumber(array('required' => false))),
      'lateral_link_front_right'                  => new sfValidatorSchemaFilter('text', new sfValidatorNumber(array('required' => false))),
      'lateral_link_rear_left'                    => new sfValidatorSchemaFilter('text', new sfValidatorNumber(array('required' => false))),
      'lateral_link_rear_right'                   => new sfValidatorSchemaFilter('text', new sfValidatorNumber(array('required' => false))),
      'lateral_link_front_left'                   => new sfValidatorSchemaFilter('text', new sfValidatorNumber(array('required' => false))),
      'damper_load1'                              => new sfValidatorPass(array('required' => false)),
      'damper_load2'                              => new sfValidatorPass(array('required' => false)),
      'damper_displacement'                       => new sfValidatorPass(array('required' => false)),
      'damper_velocity'                           => new sfValidatorPass(array('required' => false)),
      'vertical_link_front_right_validity'        => new sfValidatorChoice(array('required' => false, 'choices' => array('', 1, 0))),
      'vertical_link_rear_left_validity'          => new sfValidatorChoice(array('required' => false, 'choices' => array('', 1, 0))),
      'vertical_link_rear_right_validity'         => new sfValidatorChoice(array('required' => false, 'choices' => array('', 1, 0))),
      'vertical_link_front_left_validity'         => new sfValidatorChoice(array('required' => false, 'choices' => array('', 1, 0))),
      'lateral_link_front_right_validity'         => new sfValidatorChoice(array('required' => false, 'choices' => array('', 1, 0))),
      'lateral_link_rear_left_validity'           => new sfValidatorChoice(array('required' => false, 'choices' => array('', 1, 0))),
      'lateral_link_rear_right_validity'          => new sfValidatorChoice(array('required' => false, 'choices' => array('', 1, 0))),
      'lateral_link_front_left_validity'          => new sfValidatorChoice(array('required' => false, 'choices' => array('', 1, 0))),
      'damper_load1_validity'                     => new sfValidatorPass(array('required' => false)),
      'damper_load2_validity'                     => new sfValidatorPass(array('required' => false)),
      'damper_status'                             => new sfValidatorPass(array('required' => false)),
      'gate1_position'                            => new sfValidatorPass(array('required' => false)),
      'gate2_position'                            => new sfValidatorPass(array('required' => false)),
      'clamping_gate_position'                    => new sfValidatorPass(array('required' => false)),
      'clamping_gate_pressure'                    => new sfValidatorPass(array('required' => false)),
      'aircraft_type'                             => new sfValidatorPropelChoice(array('required' => false, 'model' => 'AircraftType', 'column' => 'name')),
      'mission_id'                                => new sfValidatorPropelChoice(array('required' => false, 'model' => 'TaxibotMission', 'column' => 'mission_id')),
      'aircraft_tail_number'                      => new sfValidatorPropelChoice(array('required' => false, 'model' => 'Aircraft', 'column' => 'tail_number')),
      'wheel_angle_feedback_front_right'          => new sfValidatorSchemaFilter('text', new sfValidatorNumber(array('required' => false))),
      'wheel_angle_feedback_front_left'           => new sfValidatorSchemaFilter('text', new sfValidatorNumber(array('required' => false))),
      'wheel_angle_feedback_rear_right'           => new sfValidatorSchemaFilter('text', new sfValidatorNumber(array('required' => false))),
      'wheel_angle_feedback_rear_left'            => new sfValidatorSchemaFilter('text', new sfValidatorNumber(array('required' => false))),
      'wheel_angle_feedback_front_right_validity' => new sfValidatorChoice(array('required' => false, 'choices' => array('', 1, 0))),
      'wheel_angle_feedback_front_left_validity'  => new sfValidatorChoice(array('required' => false, 'choices' => array('', 1, 0))),
      'wheel_angle_feedback_rear_right_validity'  => new sfValidatorChoice(array('required' => false, 'choices' => array('', 1, 0))),
      'wheel_angle_feedback_rear_left_validity'   => new sfValidatorChoice(array('required' => false, 'choices' => array('', 1, 0))),
      'pilot_command_angle'                       => new sfValidatorSchemaFilter('text', new sfValidatorNumber(array('required' => false))),
      'pilot_command_angle_validity'              => new sfValidatorChoice(array('required' => false, 'choices' => array('', 1, 0))),
      'driving_mode'                              => new sfValidatorChoice(array('required' => false, 'choices' => array('', 1, 0))),
      'actual_wheel_speed'                        => new sfValidatorSchemaFilter('text', new sfValidatorNumber(array('required' => false))),
      'desired_speed'                             => new sfValidatorSchemaFilter('text', new sfValidatorNumber(array('required' => false))),
      'actual_wheel_speed_validity'               => new sfValidatorChoice(array('required' => false, 'choices' => array('', 1, 0))),
      'nlg_steering_angle'                        => new sfValidatorSchemaFilter('text', new sfValidatorNumber(array('required' => false))),
      'nlg_steering_angle_validity'               => new sfValidatorChoice(array('required' => false, 'choices' => array('', 1, 0))),
      'turret_angle'                              => new sfValidatorSchemaFilter('text', new sfValidatorNumber(array('required' => false))),
      'turret_angle_validity'                     => new sfValidatorChoice(array('required' => false, 'choices' => array('', 1, 0))),
      'nlg_logitudal_force'                       => new sfValidatorSchemaFilter('text', new sfValidatorNumber(array('required' => false))),
      'nlg_logitudal_force_validity'              => new sfValidatorPass(array('required' => false)),
      'traction_demand'                           => new sfValidatorSchemaFilter('text', new sfValidatorNumber(array('required' => false))),
      'pilot_break_detection_unfiltered'          => new sfValidatorChoice(array('required' => false, 'choices' => array('', 1, 0))),
      'pilot_break_detection_filtered'            => new sfValidatorChoice(array('required' => false, 'choices' => array('', 1, 0))),
      'pilot_break_estimation'                    => new sfValidatorSchemaFilter('text', new sfValidatorNumber(array('required' => false))),
      'is_exceeding'                              => new sfValidatorChoice(array('required' => false, 'choices' => array('', 1, 0))),
    ));

    $this->widgetSchema->setNameFormat('taxibot_stack_filters[%s]');

    $this->errorSchema = new sfValidatorErrorSchema($this->validatorSchema);

    parent::setup();
  }

  public function getModelName()
  {
    return 'TaxibotStack';
  }

  public function getFields()
  {
    return array(
      'id'                                        => 'Number',
      'utc_time'                                  => 'Date',
      'mili_sec'                                  => 'Number',
      'utc_validity'                              => 'Boolean',
      'latitude'                                  => 'Number',
      'longitude'                                 => 'Number',
      'position_validity'                         => 'Boolean',
      'velocity_north'                            => 'Number',
      'velocity_east'                             => 'Number',
      'velocity_validity'                         => 'Boolean',
      'acceleration_north'                        => 'Number',
      'acceleration_east'                         => 'Number',
      'acceleration_z'                            => 'Number',
      'azimuth'                                   => 'Number',
      'azimuth_validity'                          => 'Boolean',
      'mfl'                                       => 'Text',
      'vertical_link_front_right'                 => 'Number',
      'vertical_link_rear_left'                   => 'Number',
      'vertical_link_rear_right'                  => 'Number',
      'vertical_link_front_left'                  => 'Number',
      'lateral_link_front_right'                  => 'Number',
      'lateral_link_rear_left'                    => 'Number',
      'lateral_link_rear_right'                   => 'Number',
      'lateral_link_front_left'                   => 'Number',
      'damper_load1'                              => 'Text',
      'damper_load2'                              => 'Text',
      'damper_displacement'                       => 'Text',
      'damper_velocity'                           => 'Text',
      'vertical_link_front_right_validity'        => 'Boolean',
      'vertical_link_rear_left_validity'          => 'Boolean',
      'vertical_link_rear_right_validity'         => 'Boolean',
      'vertical_link_front_left_validity'         => 'Boolean',
      'lateral_link_front_right_validity'         => 'Boolean',
      'lateral_link_rear_left_validity'           => 'Boolean',
      'lateral_link_rear_right_validity'          => 'Boolean',
      'lateral_link_front_left_validity'          => 'Boolean',
      'damper_load1_validity'                     => 'Text',
      'damper_load2_validity'                     => 'Text',
      'damper_status'                             => 'Text',
      'gate1_position'                            => 'Text',
      'gate2_position'                            => 'Text',
      'clamping_gate_position'                    => 'Text',
      'clamping_gate_pressure'                    => 'Text',
      'aircraft_type'                             => 'ForeignKey',
      'mission_id'                                => 'ForeignKey',
      'aircraft_tail_number'                      => 'ForeignKey',
      'wheel_angle_feedback_front_right'          => 'Number',
      'wheel_angle_feedback_front_left'           => 'Number',
      'wheel_angle_feedback_rear_right'           => 'Number',
      'wheel_angle_feedback_rear_left'            => 'Number',
      'wheel_angle_feedback_front_right_validity' => 'Boolean',
      'wheel_angle_feedback_front_left_validity'  => 'Boolean',
      'wheel_angle_feedback_rear_right_validity'  => 'Boolean',
      'wheel_angle_feedback_rear_left_validity'   => 'Boolean',
      'pilot_command_angle'                       => 'Number',
      'pilot_command_angle_validity'              => 'Boolean',
      'driving_mode'                              => 'Boolean',
      'actual_wheel_speed'                        => 'Number',
      'desired_speed'                             => 'Number',
      'actual_wheel_speed_validity'               => 'Boolean',
      'nlg_steering_angle'                        => 'Number',
      'nlg_steering_angle_validity'               => 'Boolean',
      'turret_angle'                              => 'Number',
      'turret_angle_validity'                     => 'Boolean',
      'nlg_logitudal_force'                       => 'Number',
      'nlg_logitudal_force_validity'              => 'Text',
      'traction_demand'                           => 'Number',
      'pilot_break_detection_unfiltered'          => 'Boolean',
      'pilot_break_detection_filtered'            => 'Boolean',
      'pilot_break_estimation'                    => 'Number',
      'is_exceeding'                              => 'Boolean',
    );
  }
}
