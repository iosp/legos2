<?php
require 'lib/model/om/BaseTaxibotTractorPeer.php';

/**
 * Skeleton subclass for performing query and update operations on the 'taxibot_tractor' table.
 *
 * Table of taxibot tractors
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Fri Feb 8 10:02:57 2013
 *
 * You should add additional methods to this class to meet the
 * application requirements. This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package lib.model
 */
class TaxibotTractorPeer extends BaseTaxibotTractorPeer {
	static function getMaxTraxtorID()
	{
		$con = sfContext::getInstance()->getDatabaseConnection('propel');
		
		$sql = 'SELECT MAX('.self::TRACTOR_ID.') AS max FROM '.self::TABLE_NAME;
		$rs = $con->executeQuery($sql);
		$rs->next();
		return $rs->getInt('max');
	}
	
	public static function GetTractorName($tractorId){
		$criteria = new Criteria (); 
		$criteria->add ( TaxibotTractorPeer::ID, $tractorId,Criteria::EQUAL );
		$tractor = TaxibotTractorPeer::doSelectOne ( $criteria );
		
		if (is_null($tractor))
		{
			return null;
		}
		
		return  $tractor->getName();
	}
	
	public static  function GetTractorByName($tractorName){
		$criteria = new Criteria ();
		$criteria->add ( TaxibotTractorPeer::NAME, $tractorName ,Criteria::EQUAL );
		$tractor = TaxibotTractorPeer::doSelectOne ( $criteria );
	
		if (is_null($tractor))
		{
			return null;
		}
	
		return  $tractor;
	}
	
	static public function GetTractorNames() {
		$c = new Criteria();
		$c->clearSelectColumns();
		$c->setDistinct();
		$c->addSelectColumn(self::NAME);
		$rs = self::doSelectStmt($c);
		$results = array();
	
		while($row = $rs->fetch(PDO::FETCH_BOTH))
		{
			$results[] = $row['NAME'];
		}
	
		return $results;
	} 
	
	/**
	 * This function returns a tractor object for a given tractor name.
	 * If the tractor name does not exist in the database,
	 * a new tractor is automatically added.
	 *
	 * @author Michael.
	 * @param String $tractor_name
	 *        	String Name of the tractor as given in the csv-file.
	 * @return TaxibotTractor object
	 */
	public static function getTractor($tractorName) {
		$criteria = new Criteria ();
		$criteria->add ( self::NAME, $tractorName );
		$tractor = self::doSelectOne ( $criteria );
	
		/*
		 * Create a new tractor entry
		*/
		if (! $tractor) {
			$tractor = new TaxibotTractor ();
			$tractor->setName ( $tractorName );
			$tractor->setCreationDate ( date ( 'Y-m-d H:i:s' ) );
			$tractor->save ();
		}
		return $tractor;
	}
	
} // TaxibotTractorPeer
