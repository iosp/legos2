<?php
require 'lib/model/om/BaseTaxibotFatigueHistoryPeer.php';

/**
 * Skeleton subclass for performing query and update operations on the 'taxibot_fatigue_history' table.
 *
 * TaxibotFatigueHistory
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Tue Nov 4 09:14:33 2014
 *
 * You should add additional methods to this class to meet the
 * application requirements. This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package lib.model
 */
class TaxibotFatigueHistoryPeer extends BaseTaxibotFatigueHistoryPeer {
	public static function deleteByMissionId($missionId) {
		$connection = Propel::getConnection ();
		$query = 'DELETE FROM `taxibot_fatigue_history` WHERE `mission_id` = ' . $missionId;
		$statement = $connection->prepare ( $query );
		$statement->execute ();
	}
	public static function updateMissionId($fromMissionId, $toMissionId) {
		$connection = Propel::getConnection ();
		$query = 'UPDATE `taxibot_fatigue_history` SET `mission_id`= ' . $toMissionId . ' WHERE `mission_id` = ' . $fromMissionId;
		$statement = $connection->prepare ( $query );
		$statement->execute ();
	}
	public static function insertMultiple($items, $missionId) {
		$connection = Propel::getConnection ();
		$query = 'INSERT INTO `taxibot_fatigue_history`( `aircraft_id`, `date`, `milisecond`, `long_force_kn`, `lat_force_kn`, `veolcity`, `tiller`,`break_event`,`mission_id`) VALUES ';
		
		foreach ( $items as $item ) {
			$be = 1;
			if ($item->getBreakEvent () == null) {
				$be = 0;
			}
			
			$partquery = '(';
			$partquery .= $item->getAircraftId () . ',';
			$partquery .= "'" . $item->getDate () . "',";
			$partquery .= $item->getMilisecond () . ",";
			$partquery .= abs ( $item->getLongForceKn () ) . ',';
			$partquery .= abs ( $item->getLatForceKn () ) . ',';
			$partquery .= $item->getVeolcity () . ',';
			$partquery .= $item->getTiller () . ',';
			$partquery .= $be . ',';
			$partquery .= $missionId;
			$partquery .= '),';
			
			/*
			 * print "<pre>"; print_r ( $partquery ); print "<br>"; print "</pre>";
			 */
			
			$query .= $partquery;
		}
		/*
		 * print "<pre>"; //print_r ( $query ); print "</pre>"; die();
		 */
		$query = substr ( $query, 0, - 1 );
		$statement = $connection->prepare ( $query );
		$statement->execute ();
	}
	public static function getAvgVeolcityByMission($missionId, $startDate, $endDate) {
		$connection = Propel::getConnection ();
		$query = "SELECT AVG(veolcity) FROM `taxibot_fatigue_history` WHERE `mission_id` = $missionId AND `date` BETWEEN '$startDate' AND '$endDate'";
		// dd($query);
		$statement = $connection->prepare ( $query );
		
		$statement->execute ();
		$result = $statement->fetch ();
		return $result [0];
	}
	public static function getFatigueHistoryByAircaft($aircaftId, $startDate, $endDate) {
		$startDate = $startDate->format ( "Y-m-d H:i:s" );
		$endDate = $endDate->format ( "Y-m-d H:i:s" );
		
		$connection = Propel::getConnection ();
		$query = "SELECT  * FROM `taxibot_fatigue_history` WHERE `aircraft_id` = $aircaftId AND `date` BETWEEN '$startDate' AND '$endDate'";
		
		$statement = $connection->prepare ( $query );
		$statement->execute ();
		
		$result = $statement->fetchAll ();
		
		// dd($result[0]);																																																																																																																																																
		return $result;
	}
	public static function getFatigueByMissionId($missionId) {
		$connection = Propel::getConnection ();
		$query = "SELECT * FROM `taxibot_fatigue_history` WHERE `mission_id` = $missionId";
		$statement = $connection->prepare ( $query );
		$statement->execute ();
		
		while ( $result = $statement->fetch () ) {
		}
		
		dd ( $result );
		
		$rs->next ();
		return $rs->getInt ( 'max' );
		
		$con = Propel::getConnection ();
		
		$query = "SELECT * FROM `taxibot_fatigue_history` WHERE `mission_id` = $missionId";
		
		$stmt = $con->PrepareStatement ( $query );
		$stmt->setString ( 1, $letter );
		$stmt->setInt ( 2, REGION_ID );
		
		$rs = $stmt->executeQuery ();
		
		dd ( $rs );
		while ( $rs->next () ) {
			$totals ['a'] = $rs->getInt ( 'view_total' );
			$totals ['b'] = $rs->getInt ( 'click_total' );
		}
		return $totals;
		
		$c = new Criteria ();
		$c->add ( self::MISSION_ID, $missionId );
		$pager = new sfPropelPager ( 'TaxibotFatigueHistory', 200 );
		$pager->setCriteria ( $c );
		$pager->setPage ( 1 );
		$pager->init ();
		
		$arr = array ();
		
		while ( $pager->haveToPaginate () ) {
			$result = $pager->getResults ();
			
			foreach ( $result as $item ) {
				$arr [] = $item;
			}
		}
		dd ( $arr );
		return $arr;
	}
	private function printObject($obj) {
		print "</br></br>";
		print "<pre>";
		print_r ( $obj );
		print "</pre>";
		print "</br></br>";
	}
} // TaxibotFatigueHistoryPeer
