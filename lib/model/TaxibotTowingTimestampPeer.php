<?php
require 'lib/model/om/BaseTaxibotTowingTimestampPeer.php';

/**
 * Skeleton subclass for performing query and update operations on the 'taxibot_towing_timestamp' table.
 *
 * All additional timestamps for taxibots.
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Fri Feb 8 10:28:39 2013
 *
 * You should add additional methods to this class to meet the
 * application requirements. This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package lib.model
 */
class TaxibotTowingTimestampPeer extends BaseTaxibotTowingTimestampPeer {
	
	/**
	 * Returns array with active tractor objects
	 *
	 * @author Sven
	 * @return arrray including tractor objects
	 */
	public static function getTaxibotTractors() {
		$criteria = new Criteria ();
		$criteria->add ( WerkstattKundeFahrzeugTypPeer::MODELL, "Taxibot" );
		$criteria->addJoin ( WerkstattKundeFahrzeugTypPeer::ID, WerkstattKundeFahrzeugPeer::WS_KUNDE_FAHRZEUG_TYP_ID, Criteria::LEFT_JOIN );
		$criteria->addAscendingOrderByColumn ( WerkstattKundeFahrzeugPeer::NAME );
		
		return WerkstattKundeFahrzeugPeer::doSelectAktiveFahrzeuge ( $criteria );
	}
	
	/**
	 * Returns the suitable towing for tractor, username and flightnumber (and date)
	 *
	 * @author Sven
	 * @param String $username        	
	 * @param String $tractor        	
	 * @param String $flightnumber        	
	 * @param String $date        	
	 * @param Boolean $createNew        	
	 * @return Ambigous <TaxibotTowTimestamps, NULL, unknown, multitype:>|NULL
	 */
	public static function getTowing($username, $tractor, $flightnumber, $date = null, $createNew = false) {
		$criteria = new Criteria ();
		$criteria->add ( TaxibotTowingTimestampPeer::DRIVER_ID, $username );
		$criteria->addAnd ( TaxibotTowingTimestampPeer::TRACTOR_ID, $tractor );
		$criteria->addAnd ( TaxibotTowingTimestampPeer::FLIGHTNUMBER, $flightnumber );
		$criteria->addAnd ( TaxibotTowingTimestampPeer::DATE, $date );
		$vorgang = TaxibotTowingTimestampPeer::doSelectOne ( $criteria );
		if ($vorgang)
			return $vorgang;
		elseif ($createNew) {
			$vorgang = new TaxibotTowingTimestamp ();
			$vorgang->setDriverId ( $username );
			$vorgang->setTractorId ( $tractor );
			$vorgang->setFlightnumber ( $flightnumber );
			$vorgang->setDate ( $date );
			return $vorgang;
		}
		return null;
	}
} // TaxibotTowingTimestampPeer
